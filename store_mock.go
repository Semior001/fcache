// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package fcache

import (
	"context"
	"io"
	"sync"
	"time"
)

// Ensure, that StoreMock does implement Store.
// If this is not the case, regenerate this file with moq.
var _ Store = &StoreMock{}

// StoreMock is a mock implementation of Store.
//
// 	func TestSomethingThatUsesStore(t *testing.T) {
//
// 		// make and configure a mocked Store
// 		mockedStore := &StoreMock{
// 			GetFunc: func(ctx context.Context, key string) (io.ReadCloser, error) {
// 				panic("mock out the Get method")
// 			},
// 			GetURLFunc: func(ctx context.Context, key string, expires time.Duration) (string, error) {
// 				panic("mock out the GetURL method")
// 			},
// 			KeysFunc: func(ctx context.Context) ([]string, error) {
// 				panic("mock out the Keys method")
// 			},
// 			ListFunc: func(ctx context.Context) ([]FileMeta, error) {
// 				panic("mock out the List method")
// 			},
// 			MetaFunc: func(ctx context.Context, key string) (FileMeta, error) {
// 				panic("mock out the Meta method")
// 			},
// 			PutFunc: func(ctx context.Context, key string, meta FileMeta, rd io.ReadCloser) error {
// 				panic("mock out the Put method")
// 			},
// 			RemoveFunc: func(ctx context.Context, key string) error {
// 				panic("mock out the Remove method")
// 			},
// 			StatFunc: func(ctx context.Context) (StoreStats, error) {
// 				panic("mock out the Stat method")
// 			},
// 		}
//
// 		// use mockedStore in code that requires Store
// 		// and then make assertions.
//
// 	}
type StoreMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, key string) (io.ReadCloser, error)

	// GetURLFunc mocks the GetURL method.
	GetURLFunc func(ctx context.Context, key string, expires time.Duration) (string, error)

	// KeysFunc mocks the Keys method.
	KeysFunc func(ctx context.Context) ([]string, error)

	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context) ([]FileMeta, error)

	// MetaFunc mocks the Meta method.
	MetaFunc func(ctx context.Context, key string) (FileMeta, error)

	// PutFunc mocks the Put method.
	PutFunc func(ctx context.Context, key string, meta FileMeta, rd io.ReadCloser) error

	// RemoveFunc mocks the Remove method.
	RemoveFunc func(ctx context.Context, key string) error

	// StatFunc mocks the Stat method.
	StatFunc func(ctx context.Context) (StoreStats, error)

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// GetURL holds details about calls to the GetURL method.
		GetURL []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Expires is the expires argument value.
			Expires time.Duration
		}
		// Keys holds details about calls to the Keys method.
		Keys []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// Meta holds details about calls to the Meta method.
		Meta []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// Put holds details about calls to the Put method.
		Put []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Meta is the meta argument value.
			Meta FileMeta
			// Rd is the rd argument value.
			Rd io.ReadCloser
		}
		// Remove holds details about calls to the Remove method.
		Remove []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// Stat holds details about calls to the Stat method.
		Stat []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGet    sync.RWMutex
	lockGetURL sync.RWMutex
	lockKeys   sync.RWMutex
	lockList   sync.RWMutex
	lockMeta   sync.RWMutex
	lockPut    sync.RWMutex
	lockRemove sync.RWMutex
	lockStat   sync.RWMutex
}

// Get calls GetFunc.
func (mock *StoreMock) Get(ctx context.Context, key string) (io.ReadCloser, error) {
	if mock.GetFunc == nil {
		panic("StoreMock.GetFunc: method is nil but Store.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedStore.GetCalls())
func (mock *StoreMock) GetCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// GetURL calls GetURLFunc.
func (mock *StoreMock) GetURL(ctx context.Context, key string, expires time.Duration) (string, error) {
	if mock.GetURLFunc == nil {
		panic("StoreMock.GetURLFunc: method is nil but Store.GetURL was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		Key     string
		Expires time.Duration
	}{
		Ctx:     ctx,
		Key:     key,
		Expires: expires,
	}
	mock.lockGetURL.Lock()
	mock.calls.GetURL = append(mock.calls.GetURL, callInfo)
	mock.lockGetURL.Unlock()
	return mock.GetURLFunc(ctx, key, expires)
}

// GetURLCalls gets all the calls that were made to GetURL.
// Check the length with:
//     len(mockedStore.GetURLCalls())
func (mock *StoreMock) GetURLCalls() []struct {
	Ctx     context.Context
	Key     string
	Expires time.Duration
} {
	var calls []struct {
		Ctx     context.Context
		Key     string
		Expires time.Duration
	}
	mock.lockGetURL.RLock()
	calls = mock.calls.GetURL
	mock.lockGetURL.RUnlock()
	return calls
}

// Keys calls KeysFunc.
func (mock *StoreMock) Keys(ctx context.Context) ([]string, error) {
	if mock.KeysFunc == nil {
		panic("StoreMock.KeysFunc: method is nil but Store.Keys was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockKeys.Lock()
	mock.calls.Keys = append(mock.calls.Keys, callInfo)
	mock.lockKeys.Unlock()
	return mock.KeysFunc(ctx)
}

// KeysCalls gets all the calls that were made to Keys.
// Check the length with:
//     len(mockedStore.KeysCalls())
func (mock *StoreMock) KeysCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockKeys.RLock()
	calls = mock.calls.Keys
	mock.lockKeys.RUnlock()
	return calls
}

// List calls ListFunc.
func (mock *StoreMock) List(ctx context.Context) ([]FileMeta, error) {
	if mock.ListFunc == nil {
		panic("StoreMock.ListFunc: method is nil but Store.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedStore.ListCalls())
func (mock *StoreMock) ListCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}

// Meta calls MetaFunc.
func (mock *StoreMock) Meta(ctx context.Context, key string) (FileMeta, error) {
	if mock.MetaFunc == nil {
		panic("StoreMock.MetaFunc: method is nil but Store.Meta was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockMeta.Lock()
	mock.calls.Meta = append(mock.calls.Meta, callInfo)
	mock.lockMeta.Unlock()
	return mock.MetaFunc(ctx, key)
}

// MetaCalls gets all the calls that were made to Meta.
// Check the length with:
//     len(mockedStore.MetaCalls())
func (mock *StoreMock) MetaCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockMeta.RLock()
	calls = mock.calls.Meta
	mock.lockMeta.RUnlock()
	return calls
}

// Put calls PutFunc.
func (mock *StoreMock) Put(ctx context.Context, key string, meta FileMeta, rd io.ReadCloser) error {
	if mock.PutFunc == nil {
		panic("StoreMock.PutFunc: method is nil but Store.Put was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Key  string
		Meta FileMeta
		Rd   io.ReadCloser
	}{
		Ctx:  ctx,
		Key:  key,
		Meta: meta,
		Rd:   rd,
	}
	mock.lockPut.Lock()
	mock.calls.Put = append(mock.calls.Put, callInfo)
	mock.lockPut.Unlock()
	return mock.PutFunc(ctx, key, meta, rd)
}

// PutCalls gets all the calls that were made to Put.
// Check the length with:
//     len(mockedStore.PutCalls())
func (mock *StoreMock) PutCalls() []struct {
	Ctx  context.Context
	Key  string
	Meta FileMeta
	Rd   io.ReadCloser
} {
	var calls []struct {
		Ctx  context.Context
		Key  string
		Meta FileMeta
		Rd   io.ReadCloser
	}
	mock.lockPut.RLock()
	calls = mock.calls.Put
	mock.lockPut.RUnlock()
	return calls
}

// Remove calls RemoveFunc.
func (mock *StoreMock) Remove(ctx context.Context, key string) error {
	if mock.RemoveFunc == nil {
		panic("StoreMock.RemoveFunc: method is nil but Store.Remove was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockRemove.Lock()
	mock.calls.Remove = append(mock.calls.Remove, callInfo)
	mock.lockRemove.Unlock()
	return mock.RemoveFunc(ctx, key)
}

// RemoveCalls gets all the calls that were made to Remove.
// Check the length with:
//     len(mockedStore.RemoveCalls())
func (mock *StoreMock) RemoveCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockRemove.RLock()
	calls = mock.calls.Remove
	mock.lockRemove.RUnlock()
	return calls
}

// Stat calls StatFunc.
func (mock *StoreMock) Stat(ctx context.Context) (StoreStats, error) {
	if mock.StatFunc == nil {
		panic("StoreMock.StatFunc: method is nil but Store.Stat was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockStat.Lock()
	mock.calls.Stat = append(mock.calls.Stat, callInfo)
	mock.lockStat.Unlock()
	return mock.StatFunc(ctx)
}

// StatCalls gets all the calls that were made to Stat.
// Check the length with:
//     len(mockedStore.StatCalls())
func (mock *StoreMock) StatCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockStat.RLock()
	calls = mock.calls.Stat
	mock.lockStat.RUnlock()
	return calls
}
